@using Sidekick.Apis.Poe
@using Sidekick.Apis.Poe.Bulk
@using Sidekick.Common.Browser
@using Sidekick.Apis.Poe.Trade.Models
@using Sidekick.Modules.Trade.Localization

@if (!string.IsNullOrEmpty(QueryId))
{
    <TooltipBottomRight>
        <ChildContent>
            <button type="button"
                    @onclick="@OpenWebsite"
                    @onclick:preventDefault="true"
                    @onclick:stopPropagation="true"
                    class="inline-flex items-center justify-center p-1 -m-1 text-xl font-medium tracking-wide transition-colors duration-200 rounded-md bg-transparent">
                <IconMedium Icon="@UiIcons.External"/>
            </button>
        </ChildContent>

        <TooltipContent>
            <TextBase Class="max-w-[15rem]">@Resources["OpenQueryInWebsite"]</TextBase>
        </TooltipContent>
    </TooltipBottomRight>
}

@inject IStringLocalizer<TradeResources> Resources
@inject ITradeSearchService TradeSearchService
@inject IBulkTradeService BulkTradeService
@inject IBrowserProvider BrowserProvider
@inject PriceCheckService PriceCheckService

@code {

    [Parameter]
    public string? QueryId { get; set; }

    private async Task OpenWebsite()
    {
        if (QueryId == null || PriceCheckService.Item == null)
        {
            return;
        }

        if (PriceCheckService.CurrentMode == TradeMode.Bulk)
        {
            var uri = await BulkTradeService.GetTradeUri(PriceCheckService.Item, QueryId);
            BrowserProvider.OpenUri(uri);
        }
        else
        {
            var uri = await TradeSearchService.GetTradeUri(PriceCheckService.Item.Header.Game, QueryId);
            BrowserProvider.OpenUri(uri);
        }
    }

}


