<div class="flex items-center min-h-5 @(NoMargin ? "" : "mb-3")">
    <input name="custom-checkbox" id="@Id" type="checkbox" class="hidden peer" checked="@Value" @onchange="OnChange">
    <label for="@Id"
           @onmouseenter="OnMouseEnter"
           @onmousedown="OnMouseDown"
           @onclick:preventDefault="true"
           class="leading-none peer-checked:[&_svg]:scale-100 peer-checked:text-zinc-600 [&_svg]:scale-0 peer-checked:[&_.custom-checkbox]:border-zinc-500 peer-checked:[&_.custom-checkbox]:bg-zinc-500 select-none flex items-center space-x-2">
        <span class="flex items-center justify-center w-5 h-5 min-w-5 min-h-5 border-2 rounded custom-checkbox dark:bg-zinc-700 dark:border-zinc-600">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="3" stroke="currentColor" class="w-3 h-3 text-white duration-300 ease-out">
                <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12.75l6 6 9-13.5"/>
            </svg>
        </span>
        <span class="dark:text-zinc-200 font-medium text-base">@ChildContent</span>
    </label>
</div>

@code {

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool Value { get; set; }

    [Parameter]
    public EventCallback<bool> ValueChanged { get; set; }

    [Parameter]
    public bool NoMargin { get; set; }

    private string Id { get; } = UiUtilities.GenerateId();

    private async Task OnChange(ChangeEventArgs args)
    {
        if (bool.TryParse(args.Value?.ToString(), out var boolValue))
        {
            await ValueChanged.InvokeAsync(boolValue);
        }
        else
        {
            await ValueChanged.InvokeAsync(!Value);
        }
    }

    private async Task OnMouseEnter(MouseEventArgs args)
    {
        if (args.Buttons == 1)
        {
            Value = !Value;
            await ValueChanged.InvokeAsync(Value);
        }
    }
    private async Task OnMouseDown(MouseEventArgs args)
    {
        if (args.Buttons == 1)
        {
            Value = !Value;
            await ValueChanged.InvokeAsync(Value);
        }
    }
}
