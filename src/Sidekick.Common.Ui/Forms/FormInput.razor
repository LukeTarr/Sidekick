@if (!string.IsNullOrEmpty(Label))
{
    <label for="@Id"
           class="block mb-1 text-base font-medium dark:text-zinc-200">
        @Label
    </label>
}

<div class="flex flex-nowrap gap-1 mb-3">
    <input id="@Id"
           @attributes="InputAttributes"
           @onchange="OnChange"
           @onfocus="OnFocus"
           @onblur="OnBlur"
           value="@Value"
           class="@UiClasses.FormInputClasses p-2 text-base min-w-0 grow"/>
    @AdornmentContent
</div>

@code {

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public string? Value { get; set; }

    [Parameter]
    public EventCallback<string?> ValueChanged { get; set; }

    [Parameter]
    public EventCallback<FocusEventArgs> OnFocus { get; set; }

    [Parameter]
    public EventCallback<FocusEventArgs> OnBlur { get; set; }

    [Parameter]
    public RenderFragment? AdornmentContent { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? InputAttributes { get; set; }

    private string Id { get; } = UiUtilities.GenerateId();

    private async Task OnChange(ChangeEventArgs args)
    {
        await ValueChanged.InvokeAsync(args.Value?.ToString());
    }

}
